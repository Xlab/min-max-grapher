package minmax;

/**
 * Создал: Максим Куприянов,
 * Факультет Бизнес-информатики
 * Отделение Программной инженерии
 * 2 курс, группа 272ПИ, НИУ-ВШЭ
 *
 * Проект: Курсовая работа 2011-2012гг
 *
 * Тема: "Программа выполнения операций в
 * идемпотентном полукольце конус-ограниченных
 * множеств."
 *
 * Программа: MinMaxGrapher
 *
 * Связь: me@kc.vc
 */

import hse.kcvc.jminmaxgd.Monomial;
import hse.kcvc.jminmaxgd.Polynomial;
import hse.kcvc.jminmaxgd.Series;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import jsyntaxpane.DefaultSyntaxKit;
import math.Calculator;
import minmax.gui.utils.Utils;
import minmax.model.Layer;
import minmax.model.Surface;

/**
 *
 * @author Kouprianov Maxim <me@kc.vc> @ SE HSE
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {

        initComponents();

        DefaultSyntaxKit.initKit();
        mathEditor.setContentType("text/groovy");
        mathEditor.setFont(new Font("Monaco", Font.PLAIN, 13));

        surface = new Surface();
        mainPlotter.setSurface(surface);
        mainPlotter.setXLabel("\\gamma");
        mainPlotter.setYLabel("\\delta");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        mainSplit = new javax.swing.JSplitPane();
        mainPlotter = new minmax.gui.Plotter();
        editorsSplit = new javax.swing.JSplitPane();
        editorScroll = new javax.swing.JScrollPane();
        mathEditor = new javax.swing.JEditorPane();
        formulaeScroll = new javax.swing.JScrollPane();
        formulaeView = new minmax.gui.formulaeDisplay();
        menuBar = new javax.swing.JMenuBar();
        menuMe = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuViewShadow = new javax.swing.JCheckBoxMenuItem();
        menuViewAutoCompute = new javax.swing.JCheckBoxMenuItem();
        menuEval = new javax.swing.JMenu();
        menuEvalCompute = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainSplit.setResizeWeight(0.5);

        mainPlotter.setXLabel("\\gamma");
        mainPlotter.setYLabel("\\delta");
        mainPlotter.setMinimumSize(new java.awt.Dimension(454, 246));

        org.jdesktop.layout.GroupLayout mainPlotterLayout = new org.jdesktop.layout.GroupLayout(mainPlotter);
        mainPlotter.setLayout(mainPlotterLayout);
        mainPlotterLayout.setHorizontalGroup(
            mainPlotterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 646, Short.MAX_VALUE)
        );
        mainPlotterLayout.setVerticalGroup(
            mainPlotterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 453, Short.MAX_VALUE)
        );

        mainSplit.setTopComponent(mainPlotter);

        editorsSplit.setResizeWeight(0.5);

        mathEditor.setFont(new java.awt.Font("Monaco", 0, 12)); // NOI18N
        mathEditor.setMinimumSize(new java.awt.Dimension(100, 100));
        mathEditor.setPreferredSize(new java.awt.Dimension(100, 100));
        mathEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MainForm.this.keyReleased(evt);
            }
        });
        editorScroll.setViewportView(mathEditor);

        editorsSplit.setLeftComponent(editorScroll);

        formulaeScroll.setAlignmentY(0.7F);

        formulaeView.setBackground(new java.awt.Color(255, 255, 255));
        formulaeView.setPreferredSize(new java.awt.Dimension(100, 100));

        org.jdesktop.layout.GroupLayout formulaeViewLayout = new org.jdesktop.layout.GroupLayout(formulaeView);
        formulaeView.setLayout(formulaeViewLayout);
        formulaeViewLayout.setHorizontalGroup(
            formulaeViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 398, Short.MAX_VALUE)
        );
        formulaeViewLayout.setVerticalGroup(
            formulaeViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 101, Short.MAX_VALUE)
        );

        formulaeScroll.setViewportView(formulaeView);

        editorsSplit.setRightComponent(formulaeScroll);

        mainSplit.setRightComponent(editorsSplit);

        menuMe.setText("MinMaxGrapher");
        menuMe.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N

        jMenuItem1.setText("О программе");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuMe.add(jMenuItem1);
        menuMe.add(jSeparator2);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.META_MASK));
        menuExit.setText("Выход");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuMe.add(menuExit);

        menuBar.add(menuMe);

        menuView.setLabel("Вид");

        menuViewShadow.setSelected(true);
        menuViewShadow.setText("Отображать тень");
        menuViewShadow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuViewShadowActionPerformed(evt);
            }
        });
        menuView.add(menuViewShadow);

        menuViewAutoCompute.setSelected(true);
        menuViewAutoCompute.setText("Автоматически вычислять");
        menuViewAutoCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuViewAutoComputeActionPerformed(evt);
            }
        });
        menuView.add(menuViewAutoCompute);

        menuBar.add(menuView);

        menuEval.setText("Построение");

        menuEvalCompute.setAction(computeAction);
        menuEvalCompute.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.META_MASK));
        menuEvalCompute.setText("Вычислить");
        menuEval.add(menuEvalCompute);

        menuBar.add(menuEval);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSplit)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSplit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void keyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyReleased
        if (evt.getKeyLocation() != 2) {
            createFormulae();
            if (Settings.autoCompute) {
                compute();
            }
        }
   }//GEN-LAST:event_keyReleased

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuViewShadowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuViewShadowActionPerformed
        Settings.viewShadow = menuViewShadow.getState();
        mainPlotter.updateUI();
    }//GEN-LAST:event_menuViewShadowActionPerformed

    private void menuViewAutoComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuViewAutoComputeActionPerformed
        Settings.autoCompute = menuViewAutoCompute.getState();
        computeAction.setEnabled(!Settings.autoCompute);
    }//GEN-LAST:event_menuViewAutoComputeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(rootPane, "MinMaxGrapher v1.0 (c) Куприянов Максим "
                + "2011-2012\nНИУ-ВШЭ, 2 курс, 272 группа\n\n"
                + "Данное ПО является частью курсовой работы 2011-2012гг, \n"
                + "используется для отладки библиотеки jMinMaxGD",
                "О программе", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane editorScroll;
    private javax.swing.JSplitPane editorsSplit;
    private javax.swing.JScrollPane formulaeScroll;
    private minmax.gui.formulaeDisplay formulaeView;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private minmax.gui.Plotter mainPlotter;
    private javax.swing.JSplitPane mainSplit;
    private javax.swing.JEditorPane mathEditor;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEval;
    private javax.swing.JMenuItem menuEvalCompute;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuMe;
    private javax.swing.JMenu menuView;
    private javax.swing.JCheckBoxMenuItem menuViewAutoCompute;
    private javax.swing.JCheckBoxMenuItem menuViewShadow;
    // End of variables declaration//GEN-END:variables
    final Surface surface;

    class ComputeAction extends AbstractAction {

        public ComputeAction() {
            setEnabled(false);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            compute();
        }
    }

    private void createFormulae() {
        formulae = new Thread() {

            @Override
            public void run() {
                Calculator calc = new Calculator();
                String s = mathEditor.getText();
                if (calc.checkLine(mathEditor.getText())) {
                    try {
                        Map<String, Object> result = calc.eval(mathEditor.getText());

                        String vars = "";
                        if (result != null) {
                            for (Entry entry : result.entrySet()) {
                                if (entry.getValue() instanceof Monomial) {
                                    vars += "" + entry.getKey().toString()
                                            + " = " + Utils.mLaTeX((Monomial) entry.getValue()) + "\n";
                                } else if (entry.getValue() instanceof Polynomial) {
                                    vars += "" + entry.getKey().toString()
                                            + " = " + Utils.pLaTeX((Polynomial) entry.getValue()) + "\n";
                                } else if (entry.getValue() instanceof Series) {
                                    vars += "" + entry.getKey().toString()
                                            + " = " + Utils.sLaTeX((Series) entry.getValue()) + "\n";
                                } else if (entry.getValue() instanceof ArrayList) {
                                    try {
                                        String prefix = entry.getKey().toString();
                                        int i = 0;
                                        for (Monomial m : (ArrayList<Monomial>) entry.getValue()) {
                                            ++i;
                                            vars += "" + prefix + i
                                                    + " = " + Utils.mLaTeX(m) + "\n";
                                        }
                                    } catch (Exception ex1) {
                                        try {
                                            String prefix = entry.getKey().toString();
                                            int i = 0;
                                            for (Polynomial p : (ArrayList<Polynomial>) entry.getValue()) {
                                                ++i;
                                                vars += "" + prefix + i
                                                        + " = " + Utils.pLaTeX(p) + "\n";
                                            }
                                        } catch (Exception ex2) {
                                            try {

                                                String prefix = entry.getKey().toString();
                                                int i = 0;
                                                for (Series s1 : (ArrayList<Series>) entry.getValue()) {
                                                    ++i;
                                                    vars += "" + prefix + i
                                                            + " = " + Utils.sLaTeX(s1) + "\n";
                                                }
                                            } catch (Exception ex3) {
                                                continue;
                                            }
                                        }
                                    }
                                }
                            }

                            if (vars.length() > 1) {
                                vars = "\\large{Вычисленное:}\n" + vars;
                            }
                        }

                        formulaeView.setDocument(vars);
                    } catch (Exception ex) {
                        //formulaeView.setDocument("");
                    }
                }

                if (this.isInterrupted()) {
                    return;
                }
                formulaeView.render();
            }
        };

        if (formulae != null && formulae.isAlive()) {
            formulae.interrupt();
        }
        formulae.start();
    }

    private void compute() {
        computing = new Thread() {

            Map<String, Object> result;

            @Override
            public void run() {
                Calculator calc = new Calculator();
                if (calc.checkLine(mathEditor.getText())) {
                    try {
                        if (this.isInterrupted()) {
                            return;
                        }

                        result = calc.eval(mathEditor.getText());

                        if (this.isInterrupted()) {
                            return;
                        }

                        surface.clear();
                        for (Layer l : calc.getReady()) {
                            surface.addLayer(l);
                        }
                    } catch (Exception e) {
                        surface.clear();
                    }

                    mainPlotter.updateUI();
                }
            }
        };

        if (computing != null && computing.isAlive()) {
            computing.interrupt();
        }
        computing.start();
    }
    Thread computing;
    Thread formulae;
    ComputeAction computeAction = new ComputeAction();
}
