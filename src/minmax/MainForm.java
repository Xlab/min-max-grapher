/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package minmax;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import javax.swing.text.Highlighter;
import jsyntaxpane.DefaultSyntaxKit;
import jsyntaxpane.components.Markers;
import math.Calculator;
import minmax.gui.Plotter;
import minmax.model.Config;
import minmax.model.Layer;
import minmax.model.Surface;

/**
 *
 * @author Kouprianov Maxim <me@kc.vc> @ SE HSE
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {

        initComponents();

        DefaultSyntaxKit.initKit();
        mathEditor.setContentType("text/groovy");
        mathEditor.setFont(new Font("Monaco", Font.PLAIN, 13));
        //mathEditor.setMinimumSize(new Dimension(100, 100));
        //mathEditor.setPreferredSize(new Dimension(100, 100));
        //mathEditor.set


        surface = new Surface();

        Config a = new Config(1, 2);
        Config b = new Config(4, 3);
        Config c = new Config(8, 6);
        Config d = new Config(10, 11);
        Config e = b.star();
        Config f = new Config(14, 0);

        //Config g = a.plus(b).plus(c).plus(d).plus(f);

//        surface.addLayer(a, Color.orange, false);
//        surface.addLayer(b, Color.green, false);
//        surface.addLayer(c, Color.blue, false);
//        surface.addLayer(d, Color.cyan, false);
//        surface.addLayer(f, Color.black, false);

//
//        Config t = a.plus(b);
//        Config g = new Config();
//        long start = System.currentTimeMillis();
//        for (int i = 0; i < 1; ++i) {
//            g = a.star().times(b.star()).times(c.star());
//        }
//        long end = System.currentTimeMillis();
//        System.out.println((end - start));
//        System.out.println(g.getVertexCount());
//
//        //surface.addLayer(a.star(), Color.green, false);
//        //surface.addLayer(b.star(), Color.blue, false);
//
//        surface.addLayer(g, Color.red);

        //surface.addLayer(new Config(0, -4).plus(new Config(5, -4)).plus(new Config(3, -2)).plus(new Config(8, -2)), Color.green);
        //ystem.out.println((a.plus(b)).star().plus(c));
        //surface.addLayer(a.plus(b).plus(c).plus(d), Color.blue);
        //surface.addLayer(a.plus(b).plus(c).plus(d), Color.green);

//        Config lol = new Config(0, 0);
//        for(int i = 1; i< 200; i += 1)
//        {
//            lol = lol.plus(new Config(i, i));
//            
//        }
//        
//        surface.addLayer(lol, Color.red, false);
//        
//        Config blue = new Config(3, 3);
//        for(int i = 2; i< 200; i += 2)
//        {
//            blue = blue.plus(new Config(i, i));
//            
//        }

//        surface.addLayer(blue, Color.blue, false);

        mainPlotter.setSurface(surface);
        mainPlotter.setXLabel("\\gamma");
        mainPlotter.setYLabel("\\delta");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainSplit = new javax.swing.JSplitPane();
        mainPlotter = new minmax.gui.Plotter();
        editorsSplit = new javax.swing.JSplitPane();
        editorScroll = new javax.swing.JScrollPane();
        mathEditor = new javax.swing.JEditorPane();
        formulaeScroll = new javax.swing.JScrollPane();
        formulaeView = new minmax.gui.formulaeDisplay();
        menuBar = new javax.swing.JMenuBar();
        menuMe = new javax.swing.JMenu();
        menuExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuViewShadow = new javax.swing.JCheckBoxMenuItem();
        menuViewAutoCompute = new javax.swing.JCheckBoxMenuItem();
        menuCompute = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainSplit.setResizeWeight(0.5);

        mainPlotter.setXLabel("\\gamma");
        mainPlotter.setYLabel("\\delta");
        mainPlotter.setMinimumSize(new java.awt.Dimension(454, 246));

        org.jdesktop.layout.GroupLayout mainPlotterLayout = new org.jdesktop.layout.GroupLayout(mainPlotter);
        mainPlotter.setLayout(mainPlotterLayout);
        mainPlotterLayout.setHorizontalGroup(
            mainPlotterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 646, Short.MAX_VALUE)
        );
        mainPlotterLayout.setVerticalGroup(
            mainPlotterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 442, Short.MAX_VALUE)
        );

        mainSplit.setTopComponent(mainPlotter);

        editorsSplit.setResizeWeight(0.3);

        mathEditor.setFont(new java.awt.Font("Monaco", 0, 12)); // NOI18N
        mathEditor.setMinimumSize(new java.awt.Dimension(100, 100));
        mathEditor.setPreferredSize(new java.awt.Dimension(100, 100));
        mathEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MainForm.this.keyReleased(evt);
            }
        });
        editorScroll.setViewportView(mathEditor);

        editorsSplit.setLeftComponent(editorScroll);

        formulaeScroll.setAlignmentY(0.7F);

        formulaeView.setBackground(new java.awt.Color(255, 255, 255));
        formulaeView.setPreferredSize(new java.awt.Dimension(100, 100));

        org.jdesktop.layout.GroupLayout formulaeViewLayout = new org.jdesktop.layout.GroupLayout(formulaeView);
        formulaeView.setLayout(formulaeViewLayout);
        formulaeViewLayout.setHorizontalGroup(
            formulaeViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 398, Short.MAX_VALUE)
        );
        formulaeViewLayout.setVerticalGroup(
            formulaeViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 112, Short.MAX_VALUE)
        );

        formulaeScroll.setViewportView(formulaeView);

        editorsSplit.setRightComponent(formulaeScroll);

        mainSplit.setRightComponent(editorsSplit);

        menuMe.setText("MinMaxGrapher");
        menuMe.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.META_MASK));
        menuExit.setText("Выход");
        menuMe.add(menuExit);

        menuBar.add(menuMe);

        menuView.setLabel("Вид");

        menuViewShadow.setSelected(true);
        menuViewShadow.setText("Отображать тень");
        menuView.add(menuViewShadow);

        menuViewAutoCompute.setSelected(true);
        menuViewAutoCompute.setText("Автоматически вычислять");
        menuView.add(menuViewAutoCompute);

        menuBar.add(menuView);

        menuCompute.setText("Вычислить");
        menuCompute.setEnabled(false);
        menuBar.add(menuCompute);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSplit)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSplit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void keyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyReleased
        if (!evt.isActionKey()) {
            createFormulae();
            if (menuViewAutoCompute.getState()) {
                compute();
            }
        }
   }//GEN-LAST:event_keyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane editorScroll;
    private javax.swing.JSplitPane editorsSplit;
    private javax.swing.JScrollPane formulaeScroll;
    private minmax.gui.formulaeDisplay formulaeView;
    private minmax.gui.Plotter mainPlotter;
    private javax.swing.JSplitPane mainSplit;
    private javax.swing.JEditorPane mathEditor;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuCompute;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuMe;
    private javax.swing.JMenu menuView;
    private javax.swing.JCheckBoxMenuItem menuViewAutoCompute;
    private javax.swing.JCheckBoxMenuItem menuViewShadow;
    // End of variables declaration//GEN-END:variables
    final Surface surface;

    class ComputeAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private String adaptFormulae(String f) {
        f = f.replaceAll("display\\s*\\(\\s*([^,]+)\\s*,\\s*([\\w+-]+)\\s*\\)", "\\\\text{Display } $1 \\\\text{ in } \\\\textbf{$2}"); // display -> none
        f = f.replaceAll("display\\s*\\(.*\\)", ""); //display_ not match
        f = f.replaceAll("dt\\s*\\(\\s*([\\w+-]+)\\s*,\\s*([\\w+-]+)\\s*\\)", "\\\\gamma^{$1}\\\\delta^{$2}"); // dt -> gamma-delta notation
        f = f.replaceAll("dt\\s*\\(.*\\)", ""); //dt_ not match
        f = f.replaceAll("\\s*\\+\\s*", " \\\\oplus "); // + -> oplus
        f = f.replaceAll("([\\w+-]+)\\s*\\(\\s*([\\w+-]+)\\s*\\)", "\\\\bigoplus_{k=0}^{$2}$1^{k}"); // (k) -> k-sum
        f = f.replaceAll("([\\w+-]+)\\s*\\(\\s*inf\\s*\\)", "$1^\\\\star"); // (inf) -> *
        f = f.replaceAll("([\\w+-]+)\\s*\\(\\s*\\)", "$1^\\\\star"); // () -> *
        f = f.replaceAll("\\[([\\w+-]+)\\]", "^{$1}");  // [54] -> ^{54}
        f = f.replaceAll("\\s*\\[.*\\]", ""); //a[] -> a
        f = f.replaceAll("dt\\W", ""); //dt -> none
        f = f.replaceAll("def\\s+", ""); // dt -> none
        f = f.replaceAll("([\\W]+|^)-inf([\\W]+|$)", "$1-\\\\infty$2"); // +inf -> 8
        f = f.replaceAll("([\\W]+|^)inf([\\W]+|$)", "$1+\\\\infty$2"); // +inf -> 8
        f = f.replaceAll("([\\W]+|^)zero([\\W]+|$)", "$1\\\\varepsilon$2"); // zero -> epsilon
        f = f.replaceAll("([\\W]+|^)unit([\\W]+|$)", "$1e$2"); // unit -> e
        f = f.replaceAll("/\\*(.*)$*", "\\\\text{$1}"); //hard comments bold
        f = f.replaceAll("^*(.*)\\*/", "\\\\text{$1}"); //hard comments bold
        //f = f.replaceAll("\\s*\\*\\s*", " \\\\otimes "); // * -> otimes
        f = f.replaceAll("\\s*\\*\\s*", ""); // * -> otimes
        f = f.replaceAll("\\s*//.*$", ""); // clean basic comments
        return f;
    }

    private void createFormulae() {
        formulaeView.setDocument("");
        Calculator calc = new Calculator();
        String s= mathEditor.getText();
        if (calc.checkLine(s)) {
            formulaeView.setDocument(adaptFormulae(s));
        }
        formulaeView.render();
    }

    private void compute() {
        surface.clear();
        Calculator calc = new Calculator();
        if (calc.checkLine(mathEditor.getText())) {
            try {
                calc.eval(mathEditor.getText());
                for (Layer l : calc.getReady()) {
                    surface.addLayer(l);
                }
            } catch (Exception e) {
                surface.clear();
            }

            mainPlotter.updateUI();
        }
    }
}
